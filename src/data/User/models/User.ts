/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length no-duplicate-imports
import { Field, ID, ObjectType } from 'type-graphql';
import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToMany, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';

import { asPromise } from '../../../utils/as-promise';
import * as auth from '../../../utils/auth/auth-checkers';
import { IAuthorizable } from '../../../utils/auth/IAuthorizable';
import { getInputOperationType } from '../../../utils/get-input-operation-type';
import { noChange } from '../../../utils/no-change';
import { File } from '../../File/models/File';
import { IRequestContext } from '../../IRequestContext';
import { Post } from '../../Post/models/Post';
import { EntityId, EntityIdScalar } from '../../shared/EntityId';
import { UserAuth } from '../auth/UserAuth';
import { UserRole } from '../enums/UserRole';
import { UserCreateInput } from '../inputs/UserCreateInput';
import { UserEditInput } from '../inputs/UserEditInput';
import { UserNestedInput } from '../inputs/UserNestedInput';
import { updateProfileImageRelation } from './update-operations/user-update-operations';

// <keep-imports>
import { verifyPassword } from '../../../utils/crypto';
// </keep-imports>

// <keep-decorators>
// </keep-decorators>
@Entity()
@ObjectType()
export class User implements IAuthorizable {
  @Field(() => EntityIdScalar)
  @PrimaryGeneratedColumn()
  public id: EntityId;

  public authorizationChecker = new UserAuth(this);

  @Field(() => String, { nullable: true })
  @Column({nullable: true, type: 'varchar',
    // <custom-column-args>
    // </custom-column-args>
  })
  public email?: string | null;

  @Column({nullable: true, type: 'varchar',
    // <custom-column-args>
    // </custom-column-args>
  })
  public passwordHash?: string | null;

  @Field(() => String)
  @Column({
    // <custom-column-args>
    // </custom-column-args>
  })
  public firstName: string;

  @Field(() => String)
  @Column({
    // <custom-column-args>
    // </custom-column-args>
  })
  public lastName: string;

  @Column({enum: UserRole,
    // <custom-column-args>
    // </custom-column-args>
  })
  public role: UserRole;

  @OneToMany(() => Post, (post) => post.author)
  @Field(() => [Post])
  public posts: Promise<Array<Post>>;

  @OneToOne(() => File, (file) => file.user)
  @Field(() => File , { nullable: true })
  public profileImage: Promise<File | undefined | null>;

  @CreateDateColumn()
  @Field()
  public createdAt: Date;

  @UpdateDateColumn()
  @Field()
  public updatedAt: Date;

  public async update(input: UserCreateInput | UserEditInput | UserNestedInput, context: IRequestContext) {
    const { profileImage, ...data } = input;
    if (noChange(input)) {
      return this;
    }
    if (getInputOperationType(this, input) === 'update') {
      await auth.assertCanUpdate(this, context);
    }
    Object.assign(this, data);

    await updateProfileImageRelation(this, profileImage, context);

    context.modelsToSave.push(this);

    // <keep-update-code>
    // </keep-update-code>
    await auth.assertCanPersist(this, context);

    return this;
  }

  // <keep-methods>
  public async passwordMatches(password: string) {
    return verifyPassword(password, this.passwordHash);
  }
  // </keep-methods>
}
