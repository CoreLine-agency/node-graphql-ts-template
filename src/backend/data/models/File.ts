/*** AUTOGENERATED FILE: you can only modify parts of the file within <keep-*> tags ***/
// tslint:disable max-line-length no-duplicate-imports
import { Field, ID, ObjectType } from 'type-graphql';
import { Column, CreateDateColumn, Entity, JoinColumn, ManyToOne, OneToMany, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from 'typeorm';

import { asPromise } from '../../utils/as-promise';
import * as auth from '../../utils/auth/auth-checkers';
import { IAuthorizable } from '../../utils/auth/IAuthorizable';
import { getInputOperationType } from '../../utils/get-input-operation-type';
import { noChange } from '../../utils/no-change';
import { FileAuth } from '../auth/FileAuth';
import { EntityId, EntityIdScalar } from '../EntityId';
import { FileCreateInput } from '../inputs/FileCreateInput';
import { FileEditInput } from '../inputs/FileEditInput';
import { FileNestedInput } from '../inputs/FileNestedInput';
import { IRequestContext } from '../IRequestContext';
import {  } from './update-operations/file-update-operations';

// <keep-imports>
import * as crypto from 'crypto';
// </keep-imports>

// <keep-decorators>
// </keep-decorators>
@Entity()
@ObjectType()
export class File implements IAuthorizable {
  @Field(() => EntityIdScalar)
  @PrimaryGeneratedColumn()
  public id: EntityId;

  public authorizationChecker = new FileAuth(this);

  @Field(() => String)
  @Column({type: 'text',
    // <custom-column-args>
    select: false,
    // </custom-column-args>
  })
  public contentBase64: string;

  @Column({
    // <custom-column-args>
    // </custom-column-args>
  })
  public slug: string;

  @CreateDateColumn()
  @Field()
  public createdAt: Date;

  @UpdateDateColumn()
  @Field()
  public updatedAt: Date;

  public async update(input: FileCreateInput | FileEditInput | FileNestedInput, context: IRequestContext) {
    const data = input;
    if (noChange(input)) {
      return this;
    }
    if (getInputOperationType(this, input) === 'update') {
      await auth.assertCanUpdate(this, context);
    }
    Object.assign(this, data);

    context.modelsToSave.push(this);

    // <keep-update-code>
    if (this.slug === undefined) {
      this.slug = crypto.randomBytes(16).toString('hex');
    }
    // </keep-update-code>
    await auth.assertCanPersist(this, context);

    return this;
  }

  // <keep-methods>
  // </keep-methods>
}
