type Agent {
  id: EntityId!
  firstName: String!
  lastName: String!
  talents: [Talent!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input AgentCreateInput {
  firstName: String!
  lastName: String!
}

input AgentEditInput {
  id: EntityId!
  firstName: String
  lastName: String
}

input AgentNestedInput {
  id: EntityId
  firstName: String
  lastName: String
}

input AgentSearchInput {
  id: EntityId
  firstName: String
  lastName: String
}

input AgentSearchOrderInput {
  id: OrderEnum
  firstName: OrderEnum
  lastName: OrderEnum
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""ID scalar type"""
scalar EntityId

type Mutation {
  createAgent(input: AgentCreateInput!): Agent!
  updateAgent(input: AgentEditInput!): Agent!
  deleteAgents(ids: [ID!]!): Boolean!
  createPost(input: PostCreateInput!): Post!
  updatePost(input: PostEditInput!): Post!
  deletePosts(ids: [ID!]!): Boolean!
  createTalent(input: TalentCreateInput!): Talent!
  updateTalent(input: TalentEditInput!): Talent!
  deleteTalents(ids: [ID!]!): Boolean!
  createUser(input: UserCreateInput!): User!
  updateUser(input: UserEditInput!): User!
  deleteUsers(ids: [ID!]!): Boolean!
}

enum OrderEnum {
  DESC
  ASC
}

type PaginatedAgentResponse {
  items: [Agent!]!
  total: Int!
  hasMore: Boolean!
  nextPage: Int!
}

type PaginatedPostResponse {
  items: [Post!]!
  total: Int!
  hasMore: Boolean!
  nextPage: Int!
}

type PaginatedTalentResponse {
  items: [Talent!]!
  total: Int!
  hasMore: Boolean!
  nextPage: Int!
}

type PaginatedUserResponse {
  items: [User!]!
  total: Int!
  hasMore: Boolean!
  nextPage: Int!
}

type Post {
  id: EntityId!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostCreateInput {
  content: String!
}

input PostEditInput {
  id: EntityId!
  content: String
}

input PostSearchInput {
  id: EntityId
  content: String
}

input PostSearchOrderInput {
  id: OrderEnum
  content: OrderEnum
}

type Query {
  agent(id: EntityId!): Agent!
  searchAgents(order: [AgentSearchOrderInput!], take: Int, skip: Int, search: AgentSearchInput): PaginatedAgentResponse!
  agents: [Agent!]!
  post(id: EntityId!): Post!
  searchPosts(order: [PostSearchOrderInput!], take: Int, skip: Int, search: PostSearchInput): PaginatedPostResponse!
  posts: [Post!]!
  talent(id: EntityId!): Talent!
  searchTalents(order: [TalentSearchOrderInput!], take: Int, skip: Int, search: TalentSearchInput): PaginatedTalentResponse!
  talents: [Talent!]!
  user(id: EntityId!): User!
  searchUsers(order: [UserSearchOrderInput!], take: Int, skip: Int, search: UserSearchInput): PaginatedUserResponse!
  users: [User!]!
}

input ReferenceSearchInput {
  id: EntityId
}

type Talent {
  id: EntityId!
  firstName: String!
  lastName: String!
  agent: Agent
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TalentCreateInput {
  firstName: String!
  lastName: String!
  agent: AgentNestedInput
}

input TalentEditInput {
  id: EntityId!
  firstName: String
  lastName: String
  agent: AgentNestedInput
}

input TalentSearchInput {
  id: EntityId
  firstName: String
  lastName: String
  agent: ReferenceSearchInput
}

input TalentSearchOrderInput {
  id: OrderEnum
  firstName: OrderEnum
  lastName: OrderEnum
  agent: OrderEnum
}

type User {
  id: EntityId!
  email: String
  firstName: String!
  lastName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserCreateInput {
  email: String
  password: String!
  firstName: String!
  lastName: String!
}

input UserEditInput {
  id: EntityId!
  email: String
  password: String
  firstName: String
  lastName: String
}

input UserSearchInput {
  id: EntityId
  email: String
  password: String
  firstName: String
  lastName: String
}

input UserSearchOrderInput {
  id: OrderEnum
  email: OrderEnum
  password: OrderEnum
  firstName: OrderEnum
  lastName: OrderEnum
}
