"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""ID scalar type"""
scalar EntityId

type File {
  id: EntityId!
  contentBase64: String!
  post: Post
  user: User
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FileCreateInput {
  contentBase64: String!
  post: PostNestedInput
  user: UserNestedInput
}

input FileEditInput {
  id: EntityId!
  contentBase64: String
  post: PostNestedInput
  user: UserNestedInput
}

input FileNestedInput {
  id: EntityId
  contentBase64: String
  post: PostNestedInput
  user: UserNestedInput
}

input FileSearchInput {
  id: EntityId
  contentBase64: String
  post: ReferenceSearchInput
  user: ReferenceSearchInput
}

input FileSearchOrderInput {
  id: OrderEnum
  contentBase64: OrderEnum
  post: OrderEnum
  user: OrderEnum
}

type LoginResponse {
  token: String!
  user: User!
}

type Mutation {
  emailRegister(input: UserCreateInput!): LoginResponse!
  emailLogin(password: String!, email: String!): LoginResponse!
  logout: Boolean!
  createFile(input: FileCreateInput!): File!
  updateFile(input: FileEditInput!): File!
  deleteFiles(ids: [ID!]!): Boolean!
  createPost(input: PostCreateInput!): Post!
  updatePost(input: PostEditInput!): Post!
  deletePosts(ids: [ID!]!): Boolean!
  createUser(input: UserCreateInput!): User!
  updateUser(input: UserEditInput!): User!
  deleteUsers(ids: [ID!]!): Boolean!
}

enum OrderEnum {
  DESC
  ASC
}

type PaginatedFileResponse {
  items: [File!]!
  total: Int!
  hasMore: Boolean!
  nextPage: Int!
}

type PaginatedPostResponse {
  items: [Post!]!
  total: Int!
  hasMore: Boolean!
  nextPage: Int!
}

type PaginatedUserResponse {
  items: [User!]!
  total: Int!
  hasMore: Boolean!
  nextPage: Int!
}

type Post {
  id: EntityId!
  content: String!
  name: String!
  author: User!
  images: [File!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PostCreateInput {
  content: String!
  name: String!
}

input PostEditInput {
  id: EntityId!
  content: String
  name: String
}

input PostNestedInput {
  id: EntityId
  content: String
  name: String
}

input PostSearchInput {
  id: EntityId
  content: String
  name: String
  author: ReferenceSearchInput
}

input PostSearchOrderInput {
  id: OrderEnum
  content: OrderEnum
  name: OrderEnum
  author: OrderEnum
}

type Query {
  file(id: EntityId!): File!
  searchFiles(order: [FileSearchOrderInput!], take: Int, skip: Int, search: FileSearchInput): PaginatedFileResponse!
  files: [File!]!
  post(id: EntityId!): Post!
  searchPosts(order: [PostSearchOrderInput!], take: Int, skip: Int, search: PostSearchInput): PaginatedPostResponse!
  posts: [Post!]!
  user(id: EntityId!): User!
  searchUsers(order: [UserSearchOrderInput!], take: Int, skip: Int, search: UserSearchInput): PaginatedUserResponse!
  users: [User!]!
}

input ReferenceSearchInput {
  id: EntityId
}

type User {
  id: EntityId!
  email: String
  firstName: String!
  lastName: String!
  posts: [Post!]!
  profileImage: File
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserCreateInput {
  email: String
  password: String!
  firstName: String!
  lastName: String!
  profileImage: FileNestedInput
}

input UserEditInput {
  id: EntityId!
  email: String
  password: String
  firstName: String
  lastName: String
  profileImage: FileNestedInput
}

input UserNestedInput {
  id: EntityId
  email: String
  password: String
  firstName: String
  lastName: String
  profileImage: FileNestedInput
}

input UserSearchInput {
  id: EntityId
  email: String
  password: String
  firstName: String
  lastName: String
  profileImage: ReferenceSearchInput
}

input UserSearchOrderInput {
  id: OrderEnum
  email: OrderEnum
  password: OrderEnum
  firstName: OrderEnum
  lastName: OrderEnum
  profileImage: OrderEnum
}
